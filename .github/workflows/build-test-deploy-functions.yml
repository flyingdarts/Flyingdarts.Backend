name: "Build, test, deploy functions"
on:
  push:
    branches: [ main ]
jobs:
  Build: 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dotnetVersion: [7.0.x]
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnetVersion}}
      - name: Build with dotnet
        run: dotnet build --configuration Release

  Test: 
    runs-on: ubuntu-latest
    needs: Build
    strategy:
      matrix:
        dotnetVersion: [7.0.x]
        testFunctionName: 
         - 'EnsureOnlyValidIdentifierCanConnect'
         - 'EnsureOnlyValidIdentifierCanDisconnect'
         - 'EnsureOnlyValidIdentifierCanSendMessage'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnetVersion}}
      - name: Build with dotnet
        run: dotnet build --configuration Release
      - name: Run tests
        run: dotnet test --filter Name=${{ matrix.testFunctionName }}

  Publish:
    runs-on: ubuntu-latest
    needs: Test
    strategy:
      matrix:
        dotnetVersion: [7.0.x]
        functionName: 
         - 'IYLTDSU-Signalling-OnConnect'
         - 'IYLTDSU-Signalling-OnDisconnect'
         - 'IYLTDSU-Signalling-OnDefault'
         - 'IYLTDSU-Rooms-OnCreate'
         - 'IYLTDSU-Rooms-OnJoin'
         - 'IYLTDSU-Rooms-OnLeave'
         - 'IYLTDSU-Games-X01-OnScore'
         - 'IYLTDSU-Games-X01-OnQueue'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ matrix.dotnetVersion}}
      - name: Build with dotnet
        run: dotnet build --configuration Release
      - name: Install Amazon.Lambda.Tools
        run: |
          dotnet tool install -g Amazon.Lambda.Tools
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_GITHUB_OIDC_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Deploy function
        working-directory: ${{ matrix.functionName }}
        run: |
          dotnet lambda deploy-function --function-name ${{ matrix.functionName }} -frun dotnet6 --region eu-west-1
